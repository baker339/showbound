from sqlalchemy import Column, Integer, String, Float, ForeignKey, DateTime, Boolean, JSON, UniqueConstraint
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB
import re
from sqlalchemy.ext.mutable import MutableList
from sqlalchemy import PickleType
try:
    from backend.database import Base
except ImportError:
    from database import Base
import datetime

# Position mapping for canonical codes
POSITION_MAP = {
    "Rightfielder": "RF",
    "Shortstop": "SS",
    "Second Baseman": "2B",
    "Leftfielder": "LF",
    "Centerfielder": "CF",
    "First Baseman": "1B",
    "Third Baseman": "3B",
    "Catcher": "C",
    "Pitcher": "P",
    "Designated Hitter": "DH",
    # Add more as needed
}

def parse_positions(positions_raw):
    if not positions_raw:
        return []
    parts = re.split(r',| and ', positions_raw)
    return [POSITION_MAP.get(part.strip(), part.strip()) for part in parts if part.strip()]

class Team(Base):
    __tablename__ = 'teams'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    abbreviation = Column(String, nullable=False, unique=True)
    home_games = relationship('Game', back_populates='home_team', foreign_keys='Game.home_team_id')
    away_games = relationship('Game', back_populates='away_team', foreign_keys='Game.away_team_id')

class Player(Base):
    __tablename__ = 'players'
    id = Column(Integer, primary_key=True)
    full_name = Column(String)
    bref_id = Column(String, unique=True, index=True)
    birth_date = Column(String)
    debut_date = Column(String)  # MLB debut date (raw or parsed)
    primary_position = Column(String)
    positions_raw = Column(String)
    positions = Column(MutableList.as_mutable(PickleType))  # List of codes, e.g., ["RF", "SS", "2B"]
    bats = Column(String)
    throws = Column(String)
    height = Column(String)
    weight = Column(String)
    team = Column(String)
    level = Column(String, nullable=False, default="MLB")
    image_url = Column(String)  # URL to player image
    source_url = Column(String)
    bio_json = Column(JSONB)
    # ... add other canonical bio fields as needed
    pitches = relationship('Pitch', back_populates='pitcher', foreign_keys='Pitch.pitcher_id')
    at_bats = relationship('AtBat', back_populates='batter', foreign_keys='AtBat.batter_id')
    game_grades = relationship('PlayerGameGrade', back_populates='player')
    batting_stats = relationship('BattingStat', back_populates='player')
    pitching_stats = relationship('PitchingStat', back_populates='player')
    fielding_stats = relationship('FieldingStat', back_populates='player')
    standard_batting_stats = relationship('StandardBattingStat', back_populates='player')
    value_batting_stats = relationship('ValueBattingStat', back_populates='player')
    advanced_batting_stats = relationship('AdvancedBattingStat', back_populates='player')
    standard_pitching_stats = relationship('StandardPitchingStat', back_populates='player')
    value_pitching_stats = relationship('ValuePitchingStat', back_populates='player')
    advanced_pitching_stats = relationship('AdvancedPitchingStat', back_populates='player')
    standard_fielding_stats = relationship('StandardFieldingStat', back_populates='player')

class PlayerBio(Base):
    __tablename__ = 'player_bio'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    field_name = Column(String)
    field_value = Column(String)
    source_url = Column(String)

class StatTable(Base):
    __tablename__ = 'stat_tables'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    caption = Column(String)
    table_type = Column(String)  # e.g., "batting", "pitching", "fielding"
    source_url = Column(String)

class StatRow(Base):
    __tablename__ = 'stat_rows'
    id = Column(Integer, primary_key=True)
    stat_table_id = Column(Integer, ForeignKey('stat_tables.id'))
    row_index = Column(Integer)
    row_data = Column(JSONB)

class Game(Base):
    __tablename__ = 'games'
    id = Column(Integer, primary_key=True)
    date = Column(DateTime, nullable=False)
    home_team_id = Column(Integer, ForeignKey('teams.id'))
    away_team_id = Column(Integer, ForeignKey('teams.id'))
    home_team = relationship('Team', back_populates='home_games', foreign_keys=[home_team_id])
    away_team = relationship('Team', back_populates='away_games', foreign_keys=[away_team_id])
    pitches = relationship('Pitch', back_populates='game')
    at_bats = relationship('AtBat', back_populates='game')

class Pitch(Base):
    __tablename__ = 'pitches'
    id = Column(Integer, primary_key=True)
    game_id = Column(Integer, ForeignKey('games.id'))
    pitcher_id = Column(Integer, ForeignKey('players.id'))
    batter_id = Column(Integer, ForeignKey('players.id'))
    at_bat_id = Column(Integer, ForeignKey('atbats.id'))
    inning = Column(Integer)
    pitch_number = Column(Integer)
    pitch_type = Column(String)
    pitch_result = Column(String)
    description = Column(String)
    release_speed = Column(Float)
    release_spin_rate = Column(Float)
    plate_x = Column(Float)
    plate_z = Column(Float)
    zone = Column(Integer)
    is_strike = Column(Boolean)
    is_ball = Column(Boolean)
    is_called_correctly = Column(Boolean)  # For umpire accuracy
    x0 = Column(Float)
    y0 = Column(Float)
    z0 = Column(Float)
    vx0 = Column(Float)
    vy0 = Column(Float)
    vz0 = Column(Float)
    ax = Column(Float)
    ay = Column(Float)
    az = Column(Float)
    sz_top = Column(Float)
    sz_bot = Column(Float)
    launch_speed = Column(Float)  # Statcast exit velocity
    launch_angle = Column(Float)  # Statcast launch angle
    game = relationship('Game', back_populates='pitches')
    pitcher = relationship('Player', back_populates='pitches', foreign_keys=[pitcher_id])
    batter = relationship('Player', foreign_keys=[batter_id])
    at_bat = relationship('AtBat', back_populates='pitches')

class AtBat(Base):
    __tablename__ = 'atbats'
    id = Column(Integer, primary_key=True)
    game_id = Column(Integer, ForeignKey('games.id'))
    batter_id = Column(Integer, ForeignKey('players.id'))
    pitcher_id = Column(Integer, ForeignKey('players.id'))
    inning = Column(Integer)
    result = Column(String)
    pitches = relationship('Pitch', back_populates='at_bat')
    game = relationship('Game', back_populates='at_bats')
    batter = relationship('Player', back_populates='at_bats', foreign_keys=[batter_id])
    pitcher = relationship('Player', foreign_keys=[pitcher_id])

class PlayerGameGrade(Base):
    __tablename__ = 'player_game_grades'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    game_id = Column(Integer, ForeignKey('games.id'))
    grade = Column(Float)
    notes = Column(String)
    player = relationship('Player', back_populates='game_grades')
    game = relationship('Game')

class BattingStat(Base):
    __tablename__ = 'batting_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    year = Column(String)
    team = Column(String)
    league = Column(String)
    age = Column(String)
    war = Column(Float)
    g = Column(Integer)
    pa = Column(Integer)
    ab = Column(Integer)
    r = Column(Integer)
    h = Column(Integer)
    doubles = Column(Integer)
    triples = Column(Integer)
    hr = Column(Integer)
    rbi = Column(Integer)
    sb = Column(Integer)
    cs = Column(Integer)
    bb = Column(Integer)
    so = Column(Integer)
    ba = Column(String)
    obp = Column(String)
    slg = Column(String)
    ops = Column(String)
    ops_plus = Column(Integer)
    roba = Column(String)
    rbat_plus = Column(Integer)
    tb = Column(Integer)
    gidp = Column(Integer)
    hbp = Column(Integer)
    sh = Column(Integer)
    sf = Column(Integer)
    ibb = Column(Integer)
    pos = Column(String)
    awards = Column(String)
    # Value/advanced fields
    rbat = Column(Float)
    rbaser = Column(Float)
    rdp = Column(Float)
    rfield = Column(Float)
    rpos = Column(Float)
    raa = Column(Float)
    waa = Column(Float)
    rrep = Column(Float)
    rar = Column(Float)
    waa_wl_pct = Column(String)
    wl_162_pct = Column(String)
    owar = Column(Float)
    dwar = Column(Float)
    orar = Column(Float)
    babip = Column(String)
    iso = Column(String)
    hr_pct = Column(String)
    so_pct = Column(String)
    bb_pct = Column(String)
    ev = Column(String)
    hardh_pct = Column(String)
    ld_pct = Column(String)
    gb_pct = Column(String)
    fb_pct = Column(String)
    gb_fb = Column(String)
    pull_pct = Column(String)
    cent_pct = Column(String)
    oppo_pct = Column(String)
    wpa = Column(String)
    cwpa = Column(String)
    re24 = Column(String)
    rs_pct = Column(String)
    sb_pct = Column(String)
    xbt_pct = Column(String)
    # Relationships
    player = relationship('Player', back_populates='batting_stats')
    __table_args__ = (UniqueConstraint('player_id', 'year', 'team', name='_battingstat_uc'),)

class PitchingStat(Base):
    __tablename__ = 'pitching_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    year = Column(String)
    team = Column(String)
    league = Column(String)
    age = Column(String)
    agedif = Column(String)
    level = Column(String)
    aff = Column(String)
    w = Column(Integer)
    l = Column(Integer)
    wl_pct = Column(String)
    era = Column(String)
    ra9 = Column(String)
    g = Column(Integer)
    gs = Column(Integer)
    gf = Column(Integer)
    cg = Column(Integer)
    sho = Column(Integer)
    sv = Column(Integer)
    ip = Column(String)
    h = Column(Integer)
    r = Column(Integer)
    er = Column(Integer)
    hr = Column(Integer)
    bb = Column(Integer)
    ibb = Column(Integer)
    so = Column(Integer)
    hbp = Column(Integer)
    bk = Column(Integer)
    wp = Column(Integer)
    bf = Column(Integer)
    whip = Column(String)
    h9 = Column(String)
    hr9 = Column(String)
    bb9 = Column(String)
    so9 = Column(String)
    so_w = Column(String)
    # Relationships
    player = relationship('Player', back_populates='pitching_stats')
    __table_args__ = (UniqueConstraint('player_id', 'year', 'team', name='_pitchingstat_uc'),)

class FieldingStat(Base):
    __tablename__ = 'fielding_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    year = Column(String)
    team = Column(String)
    league = Column(String)
    age = Column(String)
    g = Column(Integer)
    gs = Column(Integer)
    inn = Column(String)
    po = Column(Integer)
    a = Column(Integer)
    e = Column(Integer)
    dp = Column(Integer)
    fp = Column(String)
    # Add more fielding columns as needed
    player = relationship('Player', back_populates='fielding_stats')
    __table_args__ = (UniqueConstraint('player_id', 'year', 'team', name='_fieldingstat_uc'),)

# --- Batting Stat Tables ---
class StandardBattingStat(Base):
    __tablename__ = 'standard_batting_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    war = Column(Float)
    g = Column(Integer)
    pa = Column(Integer)
    ab = Column(Integer)
    r = Column(Integer)
    h = Column(Integer)
    doubles = Column(Integer)
    triples = Column(Integer)
    hr = Column(Integer)
    rbi = Column(Integer)
    sb = Column(Integer)
    cs = Column(Integer)
    bb = Column(Integer)
    so = Column(Integer)
    ba = Column(String)
    obp = Column(String)
    slg = Column(String)
    ops = Column(String)
    ops_plus = Column(Integer)
    roba = Column(String)
    rbat_plus = Column(Integer)
    tb = Column(Integer)
    gidp = Column(Integer)
    hbp = Column(Integer)
    sh = Column(Integer)
    sf = Column(Integer)
    ibb = Column(Integer)
    pos = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='standard_batting_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_std_batting_uc'),)

class ValueBattingStat(Base):
    __tablename__ = 'value_batting_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    pa = Column(Integer)
    rbat = Column(Float)
    rbaser = Column(Float)
    rdp = Column(Float)
    rfield = Column(Float)
    rpos = Column(Float)
    raa = Column(Float)
    waa = Column(Float)
    rrep = Column(Float)
    rar = Column(Float)
    war = Column(Float)
    waa_wl_pct = Column(String)
    wl_162_pct = Column(String)
    owar = Column(Float)
    dwar = Column(Float)
    orar = Column(Float)
    pos = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='value_batting_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_val_batting_uc'),)

class AdvancedBattingStat(Base):
    __tablename__ = 'advanced_batting_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    pa = Column(Integer)
    roba = Column(String)
    rbat_plus = Column(Integer)
    babip = Column(String)
    iso = Column(String)
    hr_pct = Column(String)
    so_pct = Column(String)
    bb_pct = Column(String)
    ev = Column(String)
    hardh_pct = Column(String)
    ld_pct = Column(String)
    gb_pct = Column(String)
    fb_pct = Column(String)
    gb_fb = Column(String)
    pull_pct = Column(String)
    cent_pct = Column(String)
    oppo_pct = Column(String)
    wpa = Column(String)
    cwpa = Column(String)
    re24 = Column(String)
    rs_pct = Column(String)
    sb_pct = Column(String)
    xbt_pct = Column(String)
    pos = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='advanced_batting_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_adv_batting_uc'),)

# --- Pitching Stat Tables ---
class StandardPitchingStat(Base):
    __tablename__ = 'standard_pitching_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    w = Column(Integer)
    l = Column(Integer)
    wl_pct = Column(String)
    era = Column(String)
    g = Column(Integer)
    gs = Column(Integer)
    gf = Column(Integer)
    cg = Column(Integer)
    sho = Column(Integer)
    sv = Column(Integer)
    ip = Column(String)
    h = Column(Integer)
    r = Column(Integer)
    er = Column(Integer)
    hr = Column(Integer)
    bb = Column(Integer)
    ibb = Column(Integer)
    so = Column(Integer)
    hbp = Column(Integer)
    bk = Column(Integer)
    wp = Column(Integer)
    bf = Column(Integer)
    era_plus = Column(Integer)
    fip = Column(String)
    whip = Column(String)
    h9 = Column(String)
    hr9 = Column(String)
    bb9 = Column(String)
    so9 = Column(String)
    so_w = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='standard_pitching_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_std_pitching_uc'),)

class ValuePitchingStat(Base):
    __tablename__ = 'value_pitching_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    waa = Column(Float)
    war = Column(Float)
    ra9 = Column(String)
    fip = Column(String)
    wpa = Column(String)
    re24 = Column(String)
    cwpa = Column(String)
    raa = Column(Float)
    rrep = Column(Float)
    rar = Column(Float)
    g = Column(Integer)
    gs = Column(Integer)
    ip = Column(String)
    bf = Column(Integer)
    awards = Column(String)
    player = relationship('Player', back_populates='value_pitching_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_val_pitching_uc'),)

class AdvancedPitchingStat(Base):
    __tablename__ = 'advanced_pitching_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    ip = Column(String)
    k_pct = Column(String)
    bb_pct = Column(String)
    hr_pct = Column(String)
    babip = Column(String)
    lob_pct = Column(String)
    era_minus = Column(String)
    fip_minus = Column(String)
    xfip_minus = Column(String)
    siera = Column(String)
    pli = Column(String)
    inli = Column(String)
    gmli = Column(String)
    exli = Column(String)
    wpa = Column(String)
    re24 = Column(String)
    cwpa = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='advanced_pitching_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', name='_adv_pitching_uc'),)

# --- Fielding Stat Tables ---
class StandardFieldingStat(Base):
    __tablename__ = 'standard_fielding_stats'
    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey('players.id'))
    season = Column(String)
    age = Column(String)
    team = Column(String)
    lg = Column(String)
    pos = Column(String)
    g = Column(Integer)
    gs = Column(Integer)
    cg = Column(Integer)
    inn = Column(String)
    ch = Column(Integer)
    po = Column(Integer)
    a = Column(Integer)
    e = Column(Integer)
    dp = Column(Integer)
    fld_pct = Column(String)
    lgfld_pct = Column(String)
    rtot = Column(Integer)
    rtot_yr = Column(Integer)
    rdrs = Column(Integer)
    rdrs_yr = Column(Integer)
    rf9 = Column(String)
    lgrf9 = Column(String)
    rfg = Column(String)
    lgrfg = Column(String)
    awards = Column(String)
    player = relationship('Player', back_populates='standard_fielding_stats')
    __table_args__ = (UniqueConstraint('player_id', 'season', 'team', 'pos', name='_std_fielding_uc'),)

class PlayerFeatures(Base):
    __tablename__ = 'player_features'
    player_id = Column(Integer, ForeignKey('players.id'), primary_key=True)
    raw_features = Column(PickleType, nullable=False)
    normalized_features = Column(PickleType, nullable=False)
    last_updated = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    player = relationship('Player')

class LevelWeights(Base):
    __tablename__ = 'level_weights'
    id = Column(Integer, primary_key=True)
    weights_json = Column(JSON)
    last_updated = Column(DateTime, default=datetime.datetime.utcnow)
